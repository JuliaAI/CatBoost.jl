var documenterSearchIndex = {"docs":
[{"location":"wrapper/#Python-Wrapper","page":"Wrapper","title":"Python Wrapper","text":"","category":"section"},{"location":"wrapper/","page":"Wrapper","title":"Wrapper","text":"Below is the Python wrapper documentation for CatBoost.jl.","category":"page"},{"location":"wrapper/","page":"Wrapper","title":"Wrapper","text":"Pool\nCatBoost.CatBoostClassifier\nCatBoost.CatBoostRegressor\ncv\nto_catboost\nto_pandas\npandas_to_tbl\nfeature_importance\nload_dataset","category":"page"},{"location":"wrapper/#CatBoost.Pool","page":"Wrapper","title":"CatBoost.Pool","text":"Pool(data; label=nothing, catfeatures=nothing, textfeatures=nothing,         pairs=nothing, delimiter='\t', hasheader=false, weight=nothing,         groupid = nothing, groupweight=nothing, subgroupid=nothing,         pairsweight=nothing, baseline=nothing, featuresnames=nothing,         thread_count = -1) -> Py\n\nCreates a Pool object holding training data and labels. data may also be passed as a keyword argument.\n\n\n\nPython documentation for catboost.Pool\n\nPython class Pool.\n\nPool used in CatBoost as a data structure to train model from.\n\n\n\n\n\n","category":"function"},{"location":"wrapper/#CatBoost.cv","page":"Wrapper","title":"CatBoost.cv","text":"cv(pool::Py; kwargs...) -> Table\n\nAccepts a CatBoost.Pool positional argument to specify the training data, and keyword arguments to configure the settings. See the python documentation below for what keyword arguments are accepted.\n\n\n\nPython documentation for catboost.cv\n\nPython function cv.\n\nCross-validate the CatBoost model.\n\nParameters\n----------\npool : catboost.Pool\n    Data to cross-validate on.\n\nparams : dict\n    Parameters for CatBoost.\n    CatBoost has many of parameters, all have default values.\n    If  None, all params still defaults.\n    If  dict, overriding some (or all) params.\n\ndtrain : catboost.Pool or tuple (X, y)\n    Synonym for pool parameter. Only one of these parameters should be set.\n\niterations : int\n    Number of boosting iterations. Can be set in params dict.\n\nnum_boost_round : int\n    Synonym for iterations. Only one of these parameters should be set.\n\nfold_count : int, optional (default=3)\n    The number of folds to split the dataset into.\n\nnfold : int\n    Synonym for fold_count.\n\ntype : string, optional (default='Classical')\n    Type of cross-validation\n    Possible values:\n        - 'Classical'\n        - 'Inverted'\n        - 'TimeSeries'\n\ninverted : bool, optional (default=False)\n    Train on the test fold and evaluate the model on the training folds.\n\npartition_random_seed : int, optional (default=0)\n    Use this as the seed value for random permutation of the data.\n    Permutation is performed before splitting the data for cross validation.\n    Each seed generates unique data splits.\n\nseed : int, optional\n    Synonym for partition_random_seed. This parameter is deprecated. Use\n    partition_random_seed instead.\n    If both parameters are initialised partition_random_seed parameter is\n    ignored.\n\nshuffle : bool, optional (default=True)\n    Shuffle the dataset objects before splitting into folds.\n\nlogging_level : string, optional (default=None)\n    Possible values:\n        - 'Silent'\n        - 'Verbose'\n        - 'Info'\n        - 'Debug'\n\nstratified : bool, optional (default=None)\n    Perform stratified sampling. True for classification and False otherwise.\n\nas_pandas : bool, optional (default=True)\n    Return pd.DataFrame when pandas is installed.\n    If False or pandas is not installed, return dict.\n\nmetric_period : int, [default=1]\n    The frequency of iterations to print the information to stdout. The value should be a positive integer.\n\nverbose : bool or int\n    If verbose is bool, then if set to True, logging_level is set to Verbose,\n    if set to False, logging_level is set to Silent.\n    If verbose is int, it determines the frequency of writing metrics to output and\n    logging_level is set to Verbose.\n\nverbose_eval : bool or int\n    Synonym for verbose. Only one of these parameters should be set.\n\nplot : bool, optional (default=False)\n    If True, draw train and eval error in Jupyter notebook\n\nplot_file : file-like or str, optional (default=None)\n    If not None, save train and eval error graphs to file\n\nearly_stopping_rounds : int\n    Activates Iter overfitting detector with od_wait set to early_stopping_rounds.\n\nsave_snapshot : bool, [default=None]\n    Enable progress snapshotting for restoring progress after crashes or interruptions\n\nsnapshot_file : string or pathlib.Path, [default=None]\n    Learn progress snapshot file path, if None will use default filename\n\nsnapshot_interval: int, [default=600]\n    Interval between saving snapshots (seconds)\n\nmetric_update_interval: float, [default=0.5]\n    Interval between updating metrics (seconds)\n\nfolds: generator or iterator of (train_idx, test_idx) tuples, scikit-learn splitter object or None, optional (default=None)\n    If generator or iterator, it should yield the train and test indices for each fold.\n    If object, it should be one of the scikit-learn splitter classes\n    (https://scikit-learn.org/stable/modules/classes.html#splitter-classes)\n    and have ``split`` method.\n    if folds is not None, then all of fold_count, shuffle, partition_random_seed, inverted are None\n\nreturn_models: bool, optional (default=False)\n    if True, return a list of models fitted for each CV fold\n\nlog_cout: output stream or callback for logging\n\nlog_cerr: error stream or callback for logging\n\nReturns\n-------\ncv results : pandas.core.frame.DataFrame with cross-validation results\n    columns are: test-error-mean  test-error-std  train-error-mean  train-error-std\ncv models : list of trained models, if return_models=True\n\n\n\n\n\n","category":"function"},{"location":"wrapper/#CatBoost.pandas_to_tbl","page":"Wrapper","title":"CatBoost.pandas_to_tbl","text":"pandas_to_tbl(pandas_df::Py)\n\nConvert a pandas dataframe into a Tables.jl columntable\n\n\n\n\n\n","category":"function"},{"location":"wrapper/#CatBoost.load_dataset","page":"Wrapper","title":"CatBoost.load_dataset","text":"load_dataset(dataset_name::Symbol)\n\nImport a catboost dataset\n\n\n\n\n\n","category":"function"},{"location":"mlj_api/#MLJ-API","page":"MLJ API","title":"MLJ API","text":"","category":"section"},{"location":"mlj_api/","page":"MLJ API","title":"MLJ API","text":"Below is the MLJ API documentation for CatBoost.jl.","category":"page"},{"location":"mlj_api/","page":"MLJ API","title":"MLJ API","text":"CatBoost.MLJCatBoostInterface.CatBoostClassifier\nCatBoost.MLJCatBoostInterface.CatBoostRegressor","category":"page"},{"location":"mlj_api/#CatBoost.MLJCatBoostInterface.CatBoostClassifier","page":"MLJ API","title":"CatBoost.MLJCatBoostInterface.CatBoostClassifier","text":"CatBoostClassifier\n\nA model type for constructing a CatBoost classifier, based on CatBoost.jl.jl, and implementing the MLJ model interface.\n\nFrom MLJ, the type can be imported using\n\nCatBoostClassifier = @load CatBoostClassifier pkg=CatBoost.jl\n\nDo model = CatBoostClassifier() to construct an instance with default hyper-parameters. Provide keyword arguments to override hyper-parameter defaults, as in CatBoostClassifier(iterations=...).\n\nTraining data\n\nIn MLJ or MLJBase, bind an instance model to data with\n\nmach = machine(model, X, y)\n\nwhere\n\nX: any table of input features (eg, a DataFrame) whose columns each have one of the following element scitypes: Continuous, Count, Finite, Textual; check column scitypes with schema(X). Textual columns will be passed to catboost as text_features, Multiclass columns will be passed to catboost as cat_features, and OrderedFactor columns will be converted to integers.\ny: the target, which can be any AbstractVector whose element scitype is Finite; check the scitype with scitype(y)\n\nTrain the machine with fit!(mach, rows=...).\n\nHyper-parameters\n\nMore details on the catboost hyperparameters, here are the Python docs:  https://catboost.ai/en/docs/concepts/python-reference_catboostclassifier#parameters\n\nOperations\n\npredict(mach, Xnew): probabilistic predictions of the target given new features Xnew having the same scitype as X above.\npredict_mode(mach, Xnew): returns the mode of each of the prediction above.\n\nAccessor functions\n\nfeature_importances(mach): return vector of feature importances, in the form of   feature::Symbol => importance::Real pairs\n\nFitted parameters\n\nThe fields of fitted_params(mach) are:\n\nmodel: The Python CatBoostClassifier model\n\nReport\n\nThe fields of report(mach) are:\n\nfeature_importances: Vector{Pair{Symbol, Float64}} of feature importances\n\nExamples\n\nusing CatBoost.MLJCatBoostInterface\nusing MLJ\n\nX = (\n    duration = [1.5, 4.1, 5.0, 6.7], \n    n_phone_calls = [4, 5, 6, 7], \n    department = coerce([\"acc\", \"ops\", \"acc\", \"ops\"], Multiclass), \n)\ny = coerce([0, 0, 1, 1], Multiclass)\n\nmodel = CatBoostClassifier(iterations=5)\nmach = machine(model, X, y)\nfit!(mach)\nprobs = predict(mach, X)\npreds = predict_mode(mach, X)\n\nSee also catboost and the unwrapped model type CatBoost.CatBoostClassifier.\n\n\n\n\n\n","category":"type"},{"location":"mlj_api/#CatBoost.MLJCatBoostInterface.CatBoostRegressor","page":"MLJ API","title":"CatBoost.MLJCatBoostInterface.CatBoostRegressor","text":"CatBoostRegressor\n\nA model type for constructing a CatBoost regressor, based on CatBoost.jl.jl, and implementing the MLJ model interface.\n\nFrom MLJ, the type can be imported using\n\nCatBoostRegressor = @load CatBoostRegressor pkg=CatBoost.jl\n\nDo model = CatBoostRegressor() to construct an instance with default hyper-parameters. Provide keyword arguments to override hyper-parameter defaults, as in CatBoostRegressor(iterations=...).\n\nTraining data\n\nIn MLJ or MLJBase, bind an instance model to data with\n\nmach = machine(model, X, y)\n\nwhere\n\nX: any table of input features (eg, a DataFrame) whose columns each have one of the following element scitypes: Continuous, Count, Finite, Textual; check column scitypes with schema(X). Textual columns will be passed to catboost as text_features, Multiclass columns will be passed to catboost as cat_features, and OrderedFactor columns will be converted to integers.\ny: the target, which can be any AbstractVector whose element scitype is Continuous; check the scitype with scitype(y)\n\nTrain the machine with fit!(mach, rows=...).\n\nHyper-parameters\n\nMore details on the catboost hyperparameters, here are the Python docs:  https://catboost.ai/en/docs/concepts/python-reference_catboostclassifier#parameters\n\nOperations\n\npredict(mach, Xnew): probabilistic predictions of the target given new features Xnew having the same scitype as X above.\n\nAccessor functions\n\nfeature_importances(mach): return vector of feature importances, in the form of   feature::Symbol => importance::Real pairs\n\nFitted parameters\n\nThe fields of fitted_params(mach) are:\n\nmodel: The Python CatBoostRegressor model\n\nReport\n\nThe fields of report(mach) are:\n\nfeature_importances: Vector{Pair{Symbol, Float64}} of feature importances\n\nExamples\n\nusing CatBoost.MLJCatBoostInterface\nusing MLJ\n\nX = (\n    duration = [1.5, 4.1, 5.0, 6.7], \n    n_phone_calls = [4, 5, 6, 7], \n    department = coerce([\"acc\", \"ops\", \"acc\", \"ops\"], Multiclass), \n)\ny = [2.0, 4.0, 6.0, 7.0]\n\nmodel = CatBoostRegressor(iterations=5)\nmach = machine(model, X, y)\nfit!(mach)\npreds = predict(mach, X)\n\nSee also catboost and the unwrapped model type CatBoost.CatBoostRegressor.\n\n\n\n\n\n","category":"type"},{"location":"#CatBoost.jl","page":"Introduction","title":"CatBoost.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia interface to CatBoost. This library is a wrapper CatBoost's Python package via PythonCall.jl. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For a nice introduction to the package, see the examples.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is available in the Julia General Registry. You can install it with either of the following commands:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add CatBoost","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg; Pkg.add(\"CatBoost\")","category":"page"}]
}
